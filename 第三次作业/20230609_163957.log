2023/06/09 16:39:58 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.16 (main, Mar  8 2023, 10:39:24) [MSC v.1916 64 bit (AMD64)]
    CUDA available: False
    numpy_random_seed: 1180839849
    MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.36.32532 版
    GCC: n/a
    PyTorch: 2.0.1
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 193431937
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.0.1, USE_CUDA=0, USE_CUDNN=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.2
    OpenCV: 4.7.0
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/09 16:39:59 - mmengine - INFO - Config:
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=5),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook', interval=10, max_keep_ckpts=2,
        save_best='auto'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/rtmdet_tiny_8xb32-300e_coco/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth'
resume = False
train_cfg = dict(
    type='EpochBasedTrainLoop',
    max_epochs=100,
    val_interval=10,
    dynamic_intervals=[(280, 1)])
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(type='LinearLR', start_factor=1e-05, by_epoch=False, begin=0, end=30),
    dict(
        type='CosineAnnealingLR',
        eta_min=9.375000000000001e-06,
        begin=50,
        end=100,
        T_max=50,
        by_epoch=True,
        convert_to_iter_based=True)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='AdamW', lr=0.0001875, weight_decay=0.05),
    paramwise_cfg=dict(
        norm_decay_mult=0, bias_decay_mult=0, bypass_duplicate=True))
auto_scale_lr = dict(enable=False, base_batch_size=16)
dataset_type = 'CocoDataset'
data_root = 'data/balloon_dataset/balloon/'
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='CachedMosaic',
        img_scale=(640, 640),
        pad_val=114.0,
        max_cached_images=20,
        random_pop=False),
    dict(
        type='RandomResize',
        scale=(1280, 1280),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='CachedMixUp',
        img_scale=(640, 640),
        ratio_range=(1.0, 1.0),
        max_cached_images=10,
        random_pop=False,
        pad_val=(114, 114, 114),
        prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(640, 640), keep_ratio=True),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=12,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=None,
    dataset=dict(
        type='CocoDataset',
        data_root='data/balloon_dataset/balloon/',
        ann_file='train/annotation_coco.json',
        data_prefix=dict(img='train/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='CachedMosaic',
                img_scale=(640, 640),
                pad_val=114.0,
                max_cached_images=20,
                random_pop=False),
            dict(
                type='RandomResize',
                scale=(1280, 1280),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='CachedMixUp',
                img_scale=(640, 640),
                ratio_range=(1.0, 1.0),
                max_cached_images=10,
                random_pop=False,
                pad_val=(114, 114, 114),
                prob=0.5),
            dict(type='PackDetInputs')
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])),
    pin_memory=False)
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='data/balloon_dataset/balloon/',
        ann_file='val/annotation_coco.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='data/balloon_dataset/balloon/',
        ann_file='val/annotation_coco.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='data/balloon_dataset/balloon/val/annotation_coco.json',
    metric='bbox',
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
test_evaluator = dict(
    type='CocoMetric',
    ann_file='data/balloon_dataset/balloon/val/annotation_coco.json',
    metric='bbox',
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
tta_model = dict(
    type='DetTTAModel',
    tta_cfg=dict(nms=dict(type='nms', iou_threshold=0.6), max_per_img=100))
img_scales = [(640, 640), (320, 320), (960, 960)]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale': (640, 640),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (320, 320),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (960, 960),
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 1.0
                    }, {
                        'type': 'RandomFlip',
                        'prob': 0.0
                    }],
                    [{
                        'type': 'Pad',
                        'size': (960, 960),
                        'pad_val': {
                            'img': (114, 114, 114)
                        }
                    }],
                    [{
                        'type':
                        'PackDetInputs',
                        'meta_keys':
                        ('img_id', 'img_path', 'ori_shape', 'img_shape',
                         'scale_factor', 'flip', 'flip_direction')
                    }]])
]
model = dict(
    type='RTMDet',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[57.375, 57.12, 58.395],
        bgr_to_rgb=False,
        batch_augments=None),
    backbone=dict(
        type='CSPNeXt',
        arch='P5',
        expand_ratio=0.5,
        deepen_factor=0.167,
        widen_factor=0.375,
        channel_attention=True,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True),
        init_cfg=dict(
            type='Pretrained',
            prefix='backbone.',
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
        ),
        frozen_stages=4),
    neck=dict(
        type='CSPNeXtPAFPN',
        in_channels=[96, 192, 384],
        out_channels=96,
        num_csp_blocks=1,
        expand_ratio=0.5,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    bbox_head=dict(
        type='RTMDetSepBNHead',
        num_classes=1,
        in_channels=96,
        stacked_convs=2,
        feat_channels=96,
        anchor_generator=dict(
            type='MlvlPointGenerator', offset=0, strides=[8, 16, 32]),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        loss_cls=dict(
            type='QualityFocalLoss',
            use_sigmoid=True,
            beta=2.0,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),
        with_objectness=False,
        exp_on_reg=False,
        share_conv=True,
        pred_kernel_size=1,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    train_cfg=dict(
        assigner=dict(type='DynamicSoftLabelAssigner', topk=13),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=30000,
        min_bbox_size=0,
        score_thr=0.001,
        nms=dict(type='nms', iou_threshold=0.65),
        max_per_img=300))
train_pipeline_stage2 = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='RandomResize',
        scale=(640, 640),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(type='PackDetInputs')
]
max_epochs = 100
stage2_num_epochs = 20
base_lr = 0.0001875
interval = 10
custom_hooks = [
    dict(
        type='EMAHook',
        ema_type='ExpMomentumEMA',
        momentum=0.0002,
        update_buffers=True,
        priority=49),
    dict(
        type='PipelineSwitchHook',
        switch_epoch=95,
        switch_pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='RandomResize',
                scale=(640, 640),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(type='PackDetInputs')
        ])
]
checkpoint = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
metainfo = dict(classes=('balloon', ), palette=[(220, 20, 60)])
num_classes = 1
train_batch_size_per_gpu = 12
train_num_workers = 4
val_batch_size_per_gpu = 1
val_num_workers = 2
num_epochs_stage2 = 5
launcher = 'none'
work_dir = './work_dirs\\ballon'

2023/06/09 16:40:02 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/09 16:40:02 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage1.1.attention.fc.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage2.1.attention.fc.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage3.1.attention.fc.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- backbone.stage4.2.attention.fc.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - WARNING - bbox_head.cls_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - WARNING - bbox_head.cls_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - WARNING - bbox_head.cls_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - WARNING - bbox_head.cls_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - WARNING - bbox_head.reg_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - WARNING - bbox_head.reg_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - WARNING - bbox_head.reg_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - WARNING - bbox_head.reg_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.weight:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.0.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.1.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.2.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.0.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.1.bias:weight_decay=0.0
2023/06/09 16:40:03 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.2.bias:weight_decay=0.0
2023/06/09 16:40:05 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([12, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.conv.weight - torch.Size([12, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.conv.weight - torch.Size([24, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.conv.weight - torch.Size([48, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([24, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([24, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.conv.weight - torch.Size([96, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.conv.weight - torch.Size([192, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.conv.weight - torch.Size([384, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.conv.weight - torch.Size([384, 768, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

neck.reduce_layers.0.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.conv.weight - torch.Size([96, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.conv.weight - torch.Size([96, 384, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.rtm_cls.0.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  
2023/06/09 16:40:05 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/rtmdet_tiny_8xb32-300e_coco/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth
2023/06/09 16:40:05 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/09 16:40:05 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/09 16:40:05 - mmengine - INFO - Checkpoints will be saved to D:\Github\mmdetection\work_dirs\ballon.
2023/06/09 16:40:46 - mmengine - INFO - Epoch(train)   [1][5/6]  lr: 2.5864e-05  eta: 1:22:15  time: 8.2946  data_time: 2.8153  loss: 2.7715  loss_cls: 2.1205  loss_bbox: 0.6510
2023/06/09 16:40:47 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:41:16 - mmengine - INFO - Epoch(train)   [2][5/6]  lr: 6.4656e-05  eta: 1:03:42  time: 6.4892  data_time: 1.3871  loss: 2.7779  loss_cls: 2.1275  loss_bbox: 0.6504
2023/06/09 16:41:17 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:41:48 - mmengine - INFO - Epoch(train)   [3][5/6]  lr: 1.0345e-04  eta: 0:58:46  time: 6.0490  data_time: 0.9732  loss: 2.7598  loss_cls: 2.1051  loss_bbox: 0.6547
2023/06/09 16:41:48 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:42:18 - mmengine - INFO - Epoch(train)   [4][5/6]  lr: 1.4224e-04  eta: 0:55:45  time: 5.7973  data_time: 0.7898  loss: 2.7628  loss_cls: 2.1192  loss_bbox: 0.6437
2023/06/09 16:42:19 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:42:49 - mmengine - INFO - Epoch(train)   [5][5/6]  lr: 1.8103e-04  eta: 0:53:50  time: 5.6571  data_time: 0.6762  loss: 2.7483  loss_cls: 2.1118  loss_bbox: 0.6365
2023/06/09 16:42:50 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:43:19 - mmengine - INFO - Epoch(train)   [6][5/6]  lr: 1.8750e-04  eta: 0:52:16  time: 5.5514  data_time: 0.5969  loss: 2.7177  loss_cls: 2.0857  loss_bbox: 0.6320
2023/06/09 16:43:20 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:43:50 - mmengine - INFO - Epoch(train)   [7][5/6]  lr: 1.8750e-04  eta: 0:51:04  time: 5.4817  data_time: 0.5399  loss: 2.6887  loss_cls: 2.0747  loss_bbox: 0.6140
2023/06/09 16:43:50 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:44:20 - mmengine - INFO - Epoch(train)   [8][5/6]  lr: 1.8750e-04  eta: 0:50:00  time: 5.4264  data_time: 0.4954  loss: 2.6240  loss_cls: 2.0332  loss_bbox: 0.5908
2023/06/09 16:44:21 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:44:50 - mmengine - INFO - Epoch(train)   [9][5/6]  lr: 1.8750e-04  eta: 0:49:06  time: 5.1026  data_time: 0.2094  loss: 2.5416  loss_cls: 1.9657  loss_bbox: 0.5758
2023/06/09 16:44:51 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:45:21 - mmengine - INFO - Epoch(train)  [10][5/6]  lr: 1.8750e-04  eta: 0:48:15  time: 5.1125  data_time: 0.2105  loss: 2.3868  loss_cls: 1.8421  loss_bbox: 0.5447
2023/06/09 16:45:21 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:45:21 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/06/09 16:45:30 - mmengine - INFO - Epoch(val)  [10][ 5/13]    eta: 0:00:11  time: 1.4884  data_time: 1.1097  
2023/06/09 16:45:32 - mmengine - INFO - Epoch(val)  [10][10/13]    eta: 0:00:02  time: 0.9228  data_time: 0.5553  
2023/06/09 16:45:33 - mmengine - INFO - Evaluating bbox...
2023/06/09 16:45:33 - mmengine - INFO - bbox_mAP_copypaste: 0.385 0.508 0.443 0.000 0.118 0.501
2023/06/09 16:45:33 - mmengine - INFO - Epoch(val) [10][13/13]    coco/bbox_mAP: 0.3850  coco/bbox_mAP_50: 0.5080  coco/bbox_mAP_75: 0.4430  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.1180  coco/bbox_mAP_l: 0.5010  data_time: 0.4274  time: 0.7949
2023/06/09 16:45:35 - mmengine - INFO - The best checkpoint with 0.3850 coco/bbox_mAP at 10 epoch is saved to best_coco_bbox_mAP_epoch_10.pth.
2023/06/09 16:46:05 - mmengine - INFO - Epoch(train)  [11][5/6]  lr: 1.8750e-04  eta: 0:47:33  time: 5.1239  data_time: 0.2076  loss: 2.2457  loss_cls: 1.7345  loss_bbox: 0.5112
2023/06/09 16:46:06 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:46:36 - mmengine - INFO - Epoch(train)  [12][5/6]  lr: 1.8750e-04  eta: 0:46:49  time: 5.0964  data_time: 0.1982  loss: 2.0793  loss_cls: 1.6010  loss_bbox: 0.4783
2023/06/09 16:46:36 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:47:06 - mmengine - INFO - Epoch(train)  [13][5/6]  lr: 1.8750e-04  eta: 0:46:08  time: 5.0963  data_time: 0.1945  loss: 1.8967  loss_cls: 1.4529  loss_bbox: 0.4438
2023/06/09 16:47:07 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:47:37 - mmengine - INFO - Epoch(train)  [14][5/6]  lr: 1.8750e-04  eta: 0:45:29  time: 5.1044  data_time: 0.1981  loss: 1.7115  loss_cls: 1.3048  loss_bbox: 0.4067
2023/06/09 16:47:37 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:48:07 - mmengine - INFO - Epoch(train)  [15][5/6]  lr: 1.8750e-04  eta: 0:44:50  time: 5.1058  data_time: 0.1985  loss: 1.5364  loss_cls: 1.1587  loss_bbox: 0.3777
2023/06/09 16:48:08 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:48:37 - mmengine - INFO - Epoch(train)  [16][5/6]  lr: 1.8750e-04  eta: 0:44:11  time: 5.1035  data_time: 0.1995  loss: 1.3613  loss_cls: 0.9893  loss_bbox: 0.3719
2023/06/09 16:48:38 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:49:08 - mmengine - INFO - Epoch(train)  [17][5/6]  lr: 1.8750e-04  eta: 0:43:35  time: 5.1078  data_time: 0.2036  loss: 1.2210  loss_cls: 0.8764  loss_bbox: 0.3447
2023/06/09 16:49:09 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:49:38 - mmengine - INFO - Epoch(train)  [18][5/6]  lr: 1.8750e-04  eta: 0:43:00  time: 5.1104  data_time: 0.2065  loss: 1.1249  loss_cls: 0.7969  loss_bbox: 0.3280
2023/06/09 16:49:39 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:50:09 - mmengine - INFO - Epoch(train)  [19][5/6]  lr: 1.8750e-04  eta: 0:42:26  time: 5.1159  data_time: 0.2157  loss: 1.0497  loss_cls: 0.7320  loss_bbox: 0.3178
2023/06/09 16:50:10 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:50:40 - mmengine - INFO - Epoch(train)  [20][5/6]  lr: 1.8750e-04  eta: 0:41:53  time: 5.1204  data_time: 0.2208  loss: 0.9713  loss_cls: 0.6625  loss_bbox: 0.3088
2023/06/09 16:50:41 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:50:41 - mmengine - INFO - Saving checkpoint at 20 epochs
2023/06/09 16:50:44 - mmengine - INFO - Epoch(val)  [20][ 5/13]    eta: 0:00:03  time: 0.6802  data_time: 0.3116  
2023/06/09 16:50:46 - mmengine - INFO - Epoch(val)  [20][10/13]    eta: 0:00:01  time: 0.6121  data_time: 0.2441  
2023/06/09 16:50:47 - mmengine - INFO - Evaluating bbox...
2023/06/09 16:50:47 - mmengine - INFO - bbox_mAP_copypaste: 0.670 0.787 0.769 0.000 0.366 0.793
2023/06/09 16:50:47 - mmengine - INFO - Epoch(val) [20][13/13]    coco/bbox_mAP: 0.6700  coco/bbox_mAP_50: 0.7870  coco/bbox_mAP_75: 0.7690  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3660  coco/bbox_mAP_l: 0.7930  data_time: 0.0042  time: 0.3693
2023/06/09 16:50:47 - mmengine - INFO - The previous best checkpoint D:\Github\mmdetection\work_dirs\ballon\best_coco_bbox_mAP_epoch_10.pth is removed
2023/06/09 16:50:49 - mmengine - INFO - The best checkpoint with 0.6700 coco/bbox_mAP at 20 epoch is saved to best_coco_bbox_mAP_epoch_20.pth.
2023/06/09 16:51:19 - mmengine - INFO - Epoch(train)  [21][5/6]  lr: 1.8750e-04  eta: 0:41:19  time: 5.1236  data_time: 0.2245  loss: 0.9095  loss_cls: 0.6074  loss_bbox: 0.3022
2023/06/09 16:51:19 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:51:49 - mmengine - INFO - Epoch(train)  [22][5/6]  lr: 1.8750e-04  eta: 0:40:44  time: 5.1197  data_time: 0.2226  loss: 0.8855  loss_cls: 0.5902  loss_bbox: 0.2953
2023/06/09 16:51:50 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:52:21 - mmengine - INFO - Epoch(train)  [23][5/6]  lr: 1.8750e-04  eta: 0:40:14  time: 5.1450  data_time: 0.2283  loss: 0.8427  loss_cls: 0.5545  loss_bbox: 0.2882
2023/06/09 16:52:21 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:52:51 - mmengine - INFO - Epoch(train)  [24][5/6]  lr: 1.8750e-04  eta: 0:39:40  time: 5.1483  data_time: 0.2290  loss: 0.8161  loss_cls: 0.5408  loss_bbox: 0.2753
2023/06/09 16:52:52 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:53:22 - mmengine - INFO - Epoch(train)  [25][5/6]  lr: 1.8750e-04  eta: 0:39:07  time: 5.1498  data_time: 0.2228  loss: 0.8029  loss_cls: 0.5291  loss_bbox: 0.2738
2023/06/09 16:53:22 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:53:52 - mmengine - INFO - Epoch(train)  [26][5/6]  lr: 1.8750e-04  eta: 0:38:34  time: 5.1478  data_time: 0.2187  loss: 0.7703  loss_cls: 0.5039  loss_bbox: 0.2664
2023/06/09 16:53:53 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:54:24 - mmengine - INFO - Epoch(train)  [27][5/6]  lr: 1.8750e-04  eta: 0:38:03  time: 5.1586  data_time: 0.2147  loss: 0.7386  loss_cls: 0.4758  loss_bbox: 0.2628
2023/06/09 16:54:24 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:54:54 - mmengine - INFO - Epoch(train)  [28][5/6]  lr: 1.8750e-04  eta: 0:37:30  time: 5.1586  data_time: 0.2108  loss: 0.7286  loss_cls: 0.4698  loss_bbox: 0.2588
2023/06/09 16:54:55 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:55:25 - mmengine - INFO - Epoch(train)  [29][5/6]  lr: 1.8750e-04  eta: 0:36:59  time: 5.1617  data_time: 0.2120  loss: 0.7198  loss_cls: 0.4624  loss_bbox: 0.2575
2023/06/09 16:55:26 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:55:56 - mmengine - INFO - Epoch(train)  [30][5/6]  lr: 1.8750e-04  eta: 0:36:26  time: 5.1635  data_time: 0.2128  loss: 0.6947  loss_cls: 0.4400  loss_bbox: 0.2546
2023/06/09 16:55:57 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:55:57 - mmengine - INFO - Saving checkpoint at 30 epochs
2023/06/09 16:56:00 - mmengine - INFO - Epoch(val)  [30][ 5/13]    eta: 0:00:03  time: 0.5513  data_time: 0.1828  
2023/06/09 16:56:02 - mmengine - INFO - Epoch(val)  [30][10/13]    eta: 0:00:01  time: 0.5245  data_time: 0.1574  
2023/06/09 16:56:03 - mmengine - INFO - Evaluating bbox...
2023/06/09 16:56:03 - mmengine - INFO - bbox_mAP_copypaste: 0.682 0.793 0.761 0.000 0.323 0.814
2023/06/09 16:56:03 - mmengine - INFO - Epoch(val) [30][13/13]    coco/bbox_mAP: 0.6820  coco/bbox_mAP_50: 0.7930  coco/bbox_mAP_75: 0.7610  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3230  coco/bbox_mAP_l: 0.8140  data_time: 0.0040  time: 0.3715
2023/06/09 16:56:03 - mmengine - INFO - The previous best checkpoint D:\Github\mmdetection\work_dirs\ballon\best_coco_bbox_mAP_epoch_20.pth is removed
2023/06/09 16:56:05 - mmengine - INFO - The best checkpoint with 0.6820 coco/bbox_mAP at 30 epoch is saved to best_coco_bbox_mAP_epoch_30.pth.
2023/06/09 16:56:35 - mmengine - INFO - Epoch(train)  [31][5/6]  lr: 1.8750e-04  eta: 0:35:54  time: 5.1480  data_time: 0.2087  loss: 0.6783  loss_cls: 0.4253  loss_bbox: 0.2530
2023/06/09 16:56:36 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:57:06 - mmengine - INFO - Epoch(train)  [32][5/6]  lr: 1.8750e-04  eta: 0:35:23  time: 5.1579  data_time: 0.2142  loss: 0.6689  loss_cls: 0.4206  loss_bbox: 0.2483
2023/06/09 16:57:07 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:57:37 - mmengine - INFO - Epoch(train)  [33][5/6]  lr: 1.8750e-04  eta: 0:34:52  time: 5.1761  data_time: 0.2186  loss: 0.6676  loss_cls: 0.4212  loss_bbox: 0.2464
2023/06/09 16:57:38 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:58:09 - mmengine - INFO - Epoch(train)  [34][5/6]  lr: 1.8750e-04  eta: 0:34:22  time: 5.2068  data_time: 0.2206  loss: 0.6613  loss_cls: 0.4157  loss_bbox: 0.2456
2023/06/09 16:58:10 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:58:40 - mmengine - INFO - Epoch(train)  [35][5/6]  lr: 1.8750e-04  eta: 0:33:51  time: 5.2017  data_time: 0.2208  loss: 0.6525  loss_cls: 0.4149  loss_bbox: 0.2375
2023/06/09 16:58:41 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:59:11 - mmengine - INFO - Epoch(train)  [36][5/6]  lr: 1.8750e-04  eta: 0:33:19  time: 5.2023  data_time: 0.2241  loss: 0.6653  loss_cls: 0.4258  loss_bbox: 0.2395
2023/06/09 16:59:12 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 16:59:42 - mmengine - INFO - Epoch(train)  [37][5/6]  lr: 1.8750e-04  eta: 0:32:48  time: 5.2029  data_time: 0.2249  loss: 0.6614  loss_cls: 0.4263  loss_bbox: 0.2352
2023/06/09 16:59:43 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:00:13 - mmengine - INFO - Epoch(train)  [38][5/6]  lr: 1.8750e-04  eta: 0:32:16  time: 5.2075  data_time: 0.2248  loss: 0.6518  loss_cls: 0.4192  loss_bbox: 0.2326
2023/06/09 17:00:14 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:00:44 - mmengine - INFO - Epoch(train)  [39][5/6]  lr: 1.8750e-04  eta: 0:31:45  time: 5.2141  data_time: 0.2278  loss: 0.6530  loss_cls: 0.4179  loss_bbox: 0.2351
2023/06/09 17:00:45 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:01:15 - mmengine - INFO - Epoch(train)  [40][5/6]  lr: 1.8750e-04  eta: 0:31:13  time: 5.2119  data_time: 0.2210  loss: 0.6598  loss_cls: 0.4217  loss_bbox: 0.2381
2023/06/09 17:01:16 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:01:16 - mmengine - INFO - Saving checkpoint at 40 epochs
2023/06/09 17:01:19 - mmengine - INFO - Epoch(val)  [40][ 5/13]    eta: 0:00:03  time: 0.4993  data_time: 0.1302  
2023/06/09 17:01:21 - mmengine - INFO - Epoch(val)  [40][10/13]    eta: 0:00:01  time: 0.4863  data_time: 0.1170  
2023/06/09 17:01:22 - mmengine - INFO - Evaluating bbox...
2023/06/09 17:01:22 - mmengine - INFO - bbox_mAP_copypaste: 0.709 0.832 0.817 0.000 0.447 0.822
2023/06/09 17:01:22 - mmengine - INFO - Epoch(val) [40][13/13]    coco/bbox_mAP: 0.7090  coco/bbox_mAP_50: 0.8320  coco/bbox_mAP_75: 0.8170  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4470  coco/bbox_mAP_l: 0.8220  data_time: 0.0048  time: 0.3800
2023/06/09 17:01:22 - mmengine - INFO - The previous best checkpoint D:\Github\mmdetection\work_dirs\ballon\best_coco_bbox_mAP_epoch_30.pth is removed
2023/06/09 17:01:24 - mmengine - INFO - The best checkpoint with 0.7090 coco/bbox_mAP at 40 epoch is saved to best_coco_bbox_mAP_epoch_40.pth.
2023/06/09 17:01:55 - mmengine - INFO - Epoch(train)  [41][5/6]  lr: 1.8750e-04  eta: 0:30:43  time: 5.2280  data_time: 0.2189  loss: 0.6536  loss_cls: 0.4129  loss_bbox: 0.2407
2023/06/09 17:01:55 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:02:27 - mmengine - INFO - Epoch(train)  [42][5/6]  lr: 1.8750e-04  eta: 0:30:14  time: 5.2318  data_time: 0.2222  loss: 0.6618  loss_cls: 0.4229  loss_bbox: 0.2389
2023/06/09 17:02:28 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:02:59 - mmengine - INFO - Epoch(train)  [43][5/6]  lr: 1.8750e-04  eta: 0:29:43  time: 5.2434  data_time: 0.2240  loss: 0.6668  loss_cls: 0.4243  loss_bbox: 0.2425
2023/06/09 17:03:00 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:03:31 - mmengine - INFO - Epoch(train)  [44][5/6]  lr: 1.8750e-04  eta: 0:29:12  time: 5.2559  data_time: 0.2279  loss: 0.6522  loss_cls: 0.4086  loss_bbox: 0.2436
2023/06/09 17:03:31 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:04:02 - mmengine - INFO - Epoch(train)  [45][5/6]  lr: 1.8750e-04  eta: 0:28:42  time: 5.2684  data_time: 0.2255  loss: 0.6522  loss_cls: 0.4100  loss_bbox: 0.2422
2023/06/09 17:04:03 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:04:34 - mmengine - INFO - Epoch(train)  [46][5/6]  lr: 1.8750e-04  eta: 0:28:11  time: 5.2779  data_time: 0.2253  loss: 0.6547  loss_cls: 0.4109  loss_bbox: 0.2439
2023/06/09 17:04:34 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:05:05 - mmengine - INFO - Epoch(train)  [47][5/6]  lr: 1.8750e-04  eta: 0:27:40  time: 5.2930  data_time: 0.2258  loss: 0.6607  loss_cls: 0.4183  loss_bbox: 0.2423
2023/06/09 17:05:06 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:05:37 - mmengine - INFO - Epoch(train)  [48][5/6]  lr: 1.8750e-04  eta: 0:27:09  time: 5.3115  data_time: 0.2337  loss: 0.6395  loss_cls: 0.4016  loss_bbox: 0.2379
2023/06/09 17:05:38 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:06:08 - mmengine - INFO - Epoch(train)  [49][5/6]  lr: 1.8750e-04  eta: 0:26:38  time: 5.3199  data_time: 0.2365  loss: 0.6370  loss_cls: 0.4023  loss_bbox: 0.2347
2023/06/09 17:57:11 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:57:40 - mmengine - INFO - Epoch(train)  [50][5/6]  lr: 1.8750e-04  eta: 1:17:27  time: 66.4802  data_time: 61.4784  loss: 0.6410  loss_cls: 0.4055  loss_bbox: 0.2355
2023/06/09 17:57:40 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:57:40 - mmengine - INFO - Saving checkpoint at 50 epochs
2023/06/09 17:57:43 - mmengine - INFO - Epoch(val)  [50][ 5/13]    eta: 0:00:02  time: 0.3730  data_time: 0.0047  
2023/06/09 17:57:45 - mmengine - INFO - Epoch(val)  [50][10/13]    eta: 0:00:01  time: 0.3707  data_time: 0.0048  
2023/06/09 17:57:46 - mmengine - INFO - Evaluating bbox...
2023/06/09 17:57:46 - mmengine - INFO - bbox_mAP_copypaste: 0.723 0.833 0.782 0.000 0.428 0.843
2023/06/09 17:57:46 - mmengine - INFO - Epoch(val) [50][13/13]    coco/bbox_mAP: 0.7230  coco/bbox_mAP_50: 0.8330  coco/bbox_mAP_75: 0.7820  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4280  coco/bbox_mAP_l: 0.8430  data_time: 0.0042  time: 0.3517
2023/06/09 17:57:46 - mmengine - INFO - The previous best checkpoint D:\Github\mmdetection\work_dirs\ballon\best_coco_bbox_mAP_epoch_40.pth is removed
2023/06/09 17:57:48 - mmengine - INFO - The best checkpoint with 0.7230 coco/bbox_mAP at 50 epoch is saved to best_coco_bbox_mAP_epoch_50.pth.
2023/06/09 17:58:17 - mmengine - INFO - Epoch(train)  [51][5/6]  lr: 1.8742e-04  eta: 1:14:54  time: 66.4394  data_time: 61.4730  loss: 0.6382  loss_cls: 0.4030  loss_bbox: 0.2351
2023/06/09 17:58:18 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:58:47 - mmengine - INFO - Epoch(train)  [52][5/6]  lr: 1.8701e-04  eta: 1:12:25  time: 66.4146  data_time: 61.4674  loss: 0.6259  loss_cls: 0.3946  loss_bbox: 0.2313
2023/06/09 17:58:48 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:59:18 - mmengine - INFO - Epoch(train)  [53][5/6]  lr: 1.8625e-04  eta: 1:10:02  time: 66.4013  data_time: 61.4665  loss: 0.6109  loss_cls: 0.3804  loss_bbox: 0.2306
2023/06/09 17:59:19 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 17:59:50 - mmengine - INFO - Epoch(train)  [54][5/6]  lr: 1.8515e-04  eta: 1:07:44  time: 66.4138  data_time: 61.4653  loss: 0.6135  loss_cls: 0.3842  loss_bbox: 0.2293
2023/06/09 17:59:51 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:00:21 - mmengine - INFO - Epoch(train)  [55][5/6]  lr: 1.8370e-04  eta: 1:05:29  time: 66.3976  data_time: 61.4589  loss: 0.6061  loss_cls: 0.3796  loss_bbox: 0.2264
2023/06/09 18:00:22 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:00:52 - mmengine - INFO - Epoch(train)  [56][5/6]  lr: 1.8191e-04  eta: 1:03:18  time: 66.3824  data_time: 61.4547  loss: 0.5955  loss_cls: 0.3702  loss_bbox: 0.2252
2023/06/09 18:00:53 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:01:25 - mmengine - INFO - Epoch(train)  [57][5/6]  lr: 1.7980e-04  eta: 1:01:12  time: 66.4155  data_time: 61.4590  loss: 0.6104  loss_cls: 0.3830  loss_bbox: 0.2273
2023/06/09 18:01:26 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:01:57 - mmengine - INFO - Epoch(train)  [58][5/6]  lr: 1.7737e-04  eta: 0:59:08  time: 5.2268  data_time: 0.2177  loss: 0.6003  loss_cls: 0.3746  loss_bbox: 0.2257
2023/06/09 18:01:58 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:02:29 - mmengine - INFO - Epoch(train)  [59][5/6]  lr: 1.7462e-04  eta: 0:57:07  time: 5.2668  data_time: 0.2241  loss: 0.5931  loss_cls: 0.3685  loss_bbox: 0.2245
2023/06/09 18:02:30 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:03:00 - mmengine - INFO - Epoch(train)  [60][5/6]  lr: 1.7157e-04  eta: 0:55:09  time: 5.2811  data_time: 0.2257  loss: 0.6090  loss_cls: 0.3802  loss_bbox: 0.2287
2023/06/09 18:03:01 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:03:01 - mmengine - INFO - Saving checkpoint at 60 epochs
2023/06/09 18:03:04 - mmengine - INFO - Epoch(val)  [60][ 5/13]    eta: 0:00:03  time: 0.3710  data_time: 0.0048  
2023/06/09 18:03:06 - mmengine - INFO - Epoch(val)  [60][10/13]    eta: 0:00:01  time: 0.3710  data_time: 0.0048  
2023/06/09 18:03:07 - mmengine - INFO - Evaluating bbox...
2023/06/09 18:03:07 - mmengine - INFO - bbox_mAP_copypaste: 0.719 0.830 0.795 0.000 0.354 0.852
2023/06/09 18:03:07 - mmengine - INFO - Epoch(val) [60][13/13]    coco/bbox_mAP: 0.7190  coco/bbox_mAP_50: 0.8300  coco/bbox_mAP_75: 0.7950  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3540  coco/bbox_mAP_l: 0.8520  data_time: 0.0046  time: 0.3732
2023/06/09 18:03:38 - mmengine - INFO - Epoch(train)  [61][5/6]  lr: 1.6824e-04  eta: 0:53:14  time: 5.3051  data_time: 0.2284  loss: 0.5995  loss_cls: 0.3731  loss_bbox: 0.2264
2023/06/09 18:03:39 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:04:09 - mmengine - INFO - Epoch(train)  [62][5/6]  lr: 1.6462e-04  eta: 0:51:21  time: 5.2840  data_time: 0.2284  loss: 0.5908  loss_cls: 0.3656  loss_bbox: 0.2252
2023/06/09 18:04:10 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:04:41 - mmengine - INFO - Epoch(train)  [63][5/6]  lr: 1.6075e-04  eta: 0:49:31  time: 5.2884  data_time: 0.2315  loss: 0.6214  loss_cls: 0.3880  loss_bbox: 0.2334
2023/06/09 18:04:41 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:05:13 - mmengine - INFO - Epoch(train)  [64][5/6]  lr: 1.5663e-04  eta: 0:47:44  time: 5.3171  data_time: 0.2327  loss: 0.6314  loss_cls: 0.3991  loss_bbox: 0.2323
2023/06/09 18:05:14 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:05:46 - mmengine - INFO - Epoch(train)  [65][5/6]  lr: 1.5228e-04  eta: 0:46:00  time: 5.3308  data_time: 0.2307  loss: 0.6254  loss_cls: 0.3928  loss_bbox: 0.2326
2023/06/09 18:05:47 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:06:18 - mmengine - INFO - Epoch(train)  [66][5/6]  lr: 1.4772e-04  eta: 0:44:17  time: 5.3155  data_time: 0.2271  loss: 0.6392  loss_cls: 0.4011  loss_bbox: 0.2381
2023/06/09 18:06:18 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:06:52 - mmengine - INFO - Epoch(train)  [67][5/6]  lr: 1.4297e-04  eta: 0:42:38  time: 5.3562  data_time: 0.2218  loss: 0.6372  loss_cls: 0.4012  loss_bbox: 0.2360
2023/06/09 18:06:53 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:07:24 - mmengine - INFO - Epoch(train)  [68][5/6]  lr: 1.3804e-04  eta: 0:40:59  time: 5.3798  data_time: 0.2225  loss: 0.6329  loss_cls: 0.3965  loss_bbox: 0.2365
2023/06/09 18:07:25 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:07:56 - mmengine - INFO - Epoch(train)  [69][5/6]  lr: 1.3295e-04  eta: 0:39:23  time: 5.4035  data_time: 0.2232  loss: 0.6444  loss_cls: 0.4030  loss_bbox: 0.2414
2023/06/09 18:07:57 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:08:28 - mmengine - INFO - Epoch(train)  [70][5/6]  lr: 1.2773e-04  eta: 0:37:48  time: 5.4102  data_time: 0.2269  loss: 0.6466  loss_cls: 0.4026  loss_bbox: 0.2440
2023/06/09 18:08:29 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:08:29 - mmengine - INFO - Saving checkpoint at 70 epochs
2023/06/09 18:08:32 - mmengine - INFO - Epoch(val)  [70][ 5/13]    eta: 0:00:03  time: 0.3708  data_time: 0.0050  
2023/06/09 18:08:34 - mmengine - INFO - Epoch(val)  [70][10/13]    eta: 0:00:01  time: 0.3720  data_time: 0.0050  
2023/06/09 18:08:36 - mmengine - INFO - Evaluating bbox...
2023/06/09 18:08:36 - mmengine - INFO - bbox_mAP_copypaste: 0.722 0.823 0.812 0.000 0.419 0.840
2023/06/09 18:08:36 - mmengine - INFO - Epoch(val) [70][13/13]    coco/bbox_mAP: 0.7220  coco/bbox_mAP_50: 0.8230  coco/bbox_mAP_75: 0.8120  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4190  coco/bbox_mAP_l: 0.8400  data_time: 0.0044  time: 0.3794
2023/06/09 18:09:07 - mmengine - INFO - Epoch(train)  [71][5/6]  lr: 1.2239e-04  eta: 0:36:15  time: 5.4250  data_time: 0.2313  loss: 0.6223  loss_cls: 0.3859  loss_bbox: 0.2363
2023/06/09 18:09:08 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:09:39 - mmengine - INFO - Epoch(train)  [72][5/6]  lr: 1.1695e-04  eta: 0:34:44  time: 5.4379  data_time: 0.2397  loss: 0.6197  loss_cls: 0.3806  loss_bbox: 0.2391
2023/06/09 18:09:40 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:10:11 - mmengine - INFO - Epoch(train)  [73][5/6]  lr: 1.1145e-04  eta: 0:33:14  time: 5.4141  data_time: 0.2376  loss: 0.6142  loss_cls: 0.3714  loss_bbox: 0.2428
2023/06/09 18:10:12 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:10:43 - mmengine - INFO - Epoch(train)  [74][5/6]  lr: 1.0589e-04  eta: 0:31:46  time: 5.4144  data_time: 0.2372  loss: 0.6045  loss_cls: 0.3662  loss_bbox: 0.2383
2023/06/09 18:10:44 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:11:16 - mmengine - INFO - Epoch(train)  [75][5/6]  lr: 1.0030e-04  eta: 0:30:20  time: 5.4122  data_time: 0.2408  loss: 0.5998  loss_cls: 0.3626  loss_bbox: 0.2372
2023/06/09 18:11:16 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:11:47 - mmengine - INFO - Epoch(train)  [76][5/6]  lr: 9.4708e-05  eta: 0:28:54  time: 5.3652  data_time: 0.2442  loss: 0.6083  loss_cls: 0.3706  loss_bbox: 0.2378
2023/06/09 18:11:48 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:12:19 - mmengine - INFO - Epoch(train)  [77][5/6]  lr: 8.9128e-05  eta: 0:27:30  time: 5.3541  data_time: 0.2413  loss: 0.5986  loss_cls: 0.3654  loss_bbox: 0.2332
2023/06/09 18:12:20 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:12:51 - mmengine - INFO - Epoch(train)  [78][5/6]  lr: 8.3585e-05  eta: 0:26:08  time: 5.3492  data_time: 0.2395  loss: 0.5897  loss_cls: 0.3620  loss_bbox: 0.2277
2023/06/09 18:12:51 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:13:23 - mmengine - INFO - Epoch(train)  [79][5/6]  lr: 7.8100e-05  eta: 0:24:47  time: 5.3585  data_time: 0.2380  loss: 0.5850  loss_cls: 0.3590  loss_bbox: 0.2260
2023/06/09 18:13:24 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:13:55 - mmengine - INFO - Epoch(train)  [80][5/6]  lr: 7.2696e-05  eta: 0:23:27  time: 5.3500  data_time: 0.2317  loss: 0.6251  loss_cls: 0.3944  loss_bbox: 0.2307
2023/06/09 18:13:56 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:13:56 - mmengine - INFO - Saving checkpoint at 80 epochs
2023/06/09 18:13:59 - mmengine - INFO - Epoch(val)  [80][ 5/13]    eta: 0:00:03  time: 0.3737  data_time: 0.0048  
2023/06/09 18:14:01 - mmengine - INFO - Epoch(val)  [80][10/13]    eta: 0:00:01  time: 0.3741  data_time: 0.0048  
2023/06/09 18:14:02 - mmengine - INFO - Evaluating bbox...
2023/06/09 18:14:03 - mmengine - INFO - bbox_mAP_copypaste: 0.737 0.843 0.836 0.000 0.444 0.854
2023/06/09 18:14:03 - mmengine - INFO - Epoch(val) [80][13/13]    coco/bbox_mAP: 0.7370  coco/bbox_mAP_50: 0.8430  coco/bbox_mAP_75: 0.8360  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4440  coco/bbox_mAP_l: 0.8540  data_time: 0.0042  time: 0.3854
2023/06/09 18:14:03 - mmengine - INFO - The previous best checkpoint D:\Github\mmdetection\work_dirs\ballon\best_coco_bbox_mAP_epoch_50.pth is removed
2023/06/09 18:14:04 - mmengine - INFO - The best checkpoint with 0.7370 coco/bbox_mAP at 80 epoch is saved to best_coco_bbox_mAP_epoch_80.pth.
2023/06/09 18:14:35 - mmengine - INFO - Epoch(train)  [81][5/6]  lr: 6.7393e-05  eta: 0:22:08  time: 5.3561  data_time: 0.2282  loss: 0.6193  loss_cls: 0.3930  loss_bbox: 0.2263
2023/06/09 18:14:36 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:15:07 - mmengine - INFO - Epoch(train)  [82][5/6]  lr: 6.2213e-05  eta: 0:20:50  time: 5.3531  data_time: 0.2324  loss: 0.6129  loss_cls: 0.3863  loss_bbox: 0.2265
2023/06/09 18:15:08 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:15:39 - mmengine - INFO - Epoch(train)  [83][5/6]  lr: 5.7175e-05  eta: 0:19:34  time: 5.3328  data_time: 0.2328  loss: 0.6125  loss_cls: 0.3893  loss_bbox: 0.2232
2023/06/09 18:15:39 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:16:10 - mmengine - INFO - Epoch(train)  [84][5/6]  lr: 5.2301e-05  eta: 0:18:18  time: 5.3243  data_time: 0.2273  loss: 0.5926  loss_cls: 0.3755  loss_bbox: 0.2171
2023/06/09 18:16:11 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:16:42 - mmengine - INFO - Epoch(train)  [85][5/6]  lr: 4.7608e-05  eta: 0:17:04  time: 5.3198  data_time: 0.2243  loss: 0.5786  loss_cls: 0.3668  loss_bbox: 0.2118
2023/06/09 18:16:42 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:17:13 - mmengine - INFO - Epoch(train)  [86][5/6]  lr: 4.3117e-05  eta: 0:15:50  time: 5.3037  data_time: 0.2244  loss: 0.5897  loss_cls: 0.3728  loss_bbox: 0.2169
2023/06/09 18:17:13 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:17:44 - mmengine - INFO - Epoch(train)  [87][5/6]  lr: 3.8843e-05  eta: 0:14:38  time: 5.2999  data_time: 0.2309  loss: 0.5914  loss_cls: 0.3712  loss_bbox: 0.2202
2023/06/09 18:17:45 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:18:16 - mmengine - INFO - Epoch(train)  [88][5/6]  lr: 3.4805e-05  eta: 0:13:26  time: 5.2879  data_time: 0.2278  loss: 0.5680  loss_cls: 0.3503  loss_bbox: 0.2178
2023/06/09 18:18:16 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:18:48 - mmengine - INFO - Epoch(train)  [89][5/6]  lr: 3.1018e-05  eta: 0:12:16  time: 5.2871  data_time: 0.2348  loss: 0.5563  loss_cls: 0.3436  loss_bbox: 0.2127
2023/06/09 18:18:48 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:19:20 - mmengine - INFO - Epoch(train)  [90][5/6]  lr: 2.7497e-05  eta: 0:11:06  time: 5.2940  data_time: 0.2361  loss: 0.5484  loss_cls: 0.3409  loss_bbox: 0.2075
2023/06/09 18:19:20 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:19:20 - mmengine - INFO - Saving checkpoint at 90 epochs
2023/06/09 18:19:24 - mmengine - INFO - Epoch(val)  [90][ 5/13]    eta: 0:00:03  time: 0.3782  data_time: 0.0050  
2023/06/09 18:19:26 - mmengine - INFO - Epoch(val)  [90][10/13]    eta: 0:00:01  time: 0.3800  data_time: 0.0050  
2023/06/09 18:19:27 - mmengine - INFO - Evaluating bbox...
2023/06/09 18:19:27 - mmengine - INFO - bbox_mAP_copypaste: 0.732 0.837 0.828 0.000 0.438 0.851
2023/06/09 18:19:27 - mmengine - INFO - Epoch(val) [90][13/13]    coco/bbox_mAP: 0.7320  coco/bbox_mAP_50: 0.8370  coco/bbox_mAP_75: 0.8280  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4380  coco/bbox_mAP_l: 0.8510  data_time: 0.0049  time: 0.3749
2023/06/09 18:19:57 - mmengine - INFO - Epoch(train)  [91][5/6]  lr: 2.4255e-05  eta: 0:09:57  time: 5.2757  data_time: 0.2333  loss: 0.5502  loss_cls: 0.3392  loss_bbox: 0.2110
2023/06/09 18:19:58 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:20:29 - mmengine - INFO - Epoch(train)  [92][5/6]  lr: 2.1307e-05  eta: 0:08:49  time: 5.2785  data_time: 0.2378  loss: 0.5532  loss_cls: 0.3412  loss_bbox: 0.2120
2023/06/09 18:20:30 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:21:00 - mmengine - INFO - Epoch(train)  [93][5/6]  lr: 1.8663e-05  eta: 0:07:41  time: 5.2761  data_time: 0.2387  loss: 0.5616  loss_cls: 0.3451  loss_bbox: 0.2165
2023/06/09 18:21:01 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:21:32 - mmengine - INFO - Epoch(train)  [94][5/6]  lr: 1.6334e-05  eta: 0:06:35  time: 5.2865  data_time: 0.2361  loss: 0.5615  loss_cls: 0.3486  loss_bbox: 0.2129
2023/06/09 18:21:33 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:22:04 - mmengine - INFO - Epoch(train)  [95][5/6]  lr: 1.4329e-05  eta: 0:05:29  time: 5.2996  data_time: 0.2330  loss: 0.5720  loss_cls: 0.3558  loss_bbox: 0.2162
2023/06/09 18:22:05 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:22:05 - mmengine - INFO - Switch pipeline now!
2023/06/09 18:22:49 - mmengine - INFO - Epoch(train)  [96][5/6]  lr: 1.2656e-05  eta: 0:04:24  time: 5.5736  data_time: 0.5031  loss: 0.5368  loss_cls: 0.3300  loss_bbox: 0.2068
2023/06/09 18:22:50 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:23:21 - mmengine - INFO - Epoch(train)  [97][5/6]  lr: 1.1321e-05  eta: 0:03:20  time: 5.5814  data_time: 0.4858  loss: 0.5224  loss_cls: 0.3245  loss_bbox: 0.1978
2023/06/09 18:23:22 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:23:53 - mmengine - INFO - Epoch(train)  [98][5/6]  lr: 1.0330e-05  eta: 0:02:16  time: 5.5628  data_time: 0.4701  loss: 0.5351  loss_cls: 0.3398  loss_bbox: 0.1953
2023/06/09 18:23:54 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:24:25 - mmengine - INFO - Epoch(train)  [99][5/6]  lr: 9.6874e-06  eta: 0:01:13  time: 5.5759  data_time: 0.4584  loss: 0.5150  loss_cls: 0.3295  loss_bbox: 0.1854
2023/06/09 18:24:25 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:24:56 - mmengine - INFO - Epoch(train) [100][5/6]  lr: 9.3945e-06  eta: 0:00:10  time: 5.5790  data_time: 0.4410  loss: 0.4955  loss_cls: 0.3170  loss_bbox: 0.1785
2023/06/09 18:24:57 - mmengine - INFO - Exp name: ballon_20230609_163957
2023/06/09 18:24:57 - mmengine - INFO - Saving checkpoint at 100 epochs
2023/06/09 18:25:01 - mmengine - INFO - Epoch(val) [100][ 5/13]    eta: 0:00:03  time: 0.3878  data_time: 0.0055  
2023/06/09 18:25:03 - mmengine - INFO - Epoch(val) [100][10/13]    eta: 0:00:01  time: 0.3878  data_time: 0.0054  
2023/06/09 18:25:04 - mmengine - INFO - Evaluating bbox...
2023/06/09 18:25:04 - mmengine - INFO - bbox_mAP_copypaste: 0.722 0.845 0.813 0.000 0.431 0.843
2023/06/09 18:25:04 - mmengine - INFO - Epoch(val) [100][13/13]    coco/bbox_mAP: 0.7220  coco/bbox_mAP_50: 0.8450  coco/bbox_mAP_75: 0.8130  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4310  coco/bbox_mAP_l: 0.8430  data_time: 0.0064  time: 0.4055
